/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.welab;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class LoginEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -8732846562396144194L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"LoginEvent\",\"namespace\":\"com.welab\",\"fields\":[{\"name\":\"user_id\",\"type\":\"string\"},{\"name\":\"session_login_status\",\"type\":\"string\"},{\"name\":\"session_login_time\",\"type\":\"string\"},{\"name\":\"session_auth_type\",\"type\":\"string\"},{\"name\":\"session_device_id\",\"type\":\"string\"},{\"name\":\"session_operation_system\",\"type\":\"string\"},{\"name\":\"session_browser\",\"type\":\"string\"},{\"name\":\"session_screen_resolution\",\"type\":\"string\"},{\"name\":\"session_language\",\"type\":\"string\"},{\"name\":\"session_country\",\"type\":\"string\"},{\"name\":\"session_city\",\"type\":\"string\"},{\"name\":\"session_ip_address\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<LoginEvent> ENCODER =
      new BinaryMessageEncoder<LoginEvent>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<LoginEvent> DECODER =
      new BinaryMessageDecoder<LoginEvent>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<LoginEvent> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<LoginEvent> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<LoginEvent> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<LoginEvent>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this LoginEvent to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a LoginEvent from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a LoginEvent instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static LoginEvent fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence user_id;
  @Deprecated public java.lang.CharSequence session_login_status;
  @Deprecated public java.lang.CharSequence session_login_time;
  @Deprecated public java.lang.CharSequence session_auth_type;
  @Deprecated public java.lang.CharSequence session_device_id;
  @Deprecated public java.lang.CharSequence session_operation_system;
  @Deprecated public java.lang.CharSequence session_browser;
  @Deprecated public java.lang.CharSequence session_screen_resolution;
  @Deprecated public java.lang.CharSequence session_language;
  @Deprecated public java.lang.CharSequence session_country;
  @Deprecated public java.lang.CharSequence session_city;
  @Deprecated public java.lang.CharSequence session_ip_address;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public LoginEvent() {}

  /**
   * All-args constructor.
   * @param user_id The new value for user_id
   * @param session_login_status The new value for session_login_status
   * @param session_login_time The new value for session_login_time
   * @param session_auth_type The new value for session_auth_type
   * @param session_device_id The new value for session_device_id
   * @param session_operation_system The new value for session_operation_system
   * @param session_browser The new value for session_browser
   * @param session_screen_resolution The new value for session_screen_resolution
   * @param session_language The new value for session_language
   * @param session_country The new value for session_country
   * @param session_city The new value for session_city
   * @param session_ip_address The new value for session_ip_address
   */
  public LoginEvent(java.lang.CharSequence user_id, java.lang.CharSequence session_login_status, java.lang.CharSequence session_login_time, java.lang.CharSequence session_auth_type, java.lang.CharSequence session_device_id, java.lang.CharSequence session_operation_system, java.lang.CharSequence session_browser, java.lang.CharSequence session_screen_resolution, java.lang.CharSequence session_language, java.lang.CharSequence session_country, java.lang.CharSequence session_city, java.lang.CharSequence session_ip_address) {
    this.user_id = user_id;
    this.session_login_status = session_login_status;
    this.session_login_time = session_login_time;
    this.session_auth_type = session_auth_type;
    this.session_device_id = session_device_id;
    this.session_operation_system = session_operation_system;
    this.session_browser = session_browser;
    this.session_screen_resolution = session_screen_resolution;
    this.session_language = session_language;
    this.session_country = session_country;
    this.session_city = session_city;
    this.session_ip_address = session_ip_address;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return user_id;
    case 1: return session_login_status;
    case 2: return session_login_time;
    case 3: return session_auth_type;
    case 4: return session_device_id;
    case 5: return session_operation_system;
    case 6: return session_browser;
    case 7: return session_screen_resolution;
    case 8: return session_language;
    case 9: return session_country;
    case 10: return session_city;
    case 11: return session_ip_address;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: user_id = (java.lang.CharSequence)value$; break;
    case 1: session_login_status = (java.lang.CharSequence)value$; break;
    case 2: session_login_time = (java.lang.CharSequence)value$; break;
    case 3: session_auth_type = (java.lang.CharSequence)value$; break;
    case 4: session_device_id = (java.lang.CharSequence)value$; break;
    case 5: session_operation_system = (java.lang.CharSequence)value$; break;
    case 6: session_browser = (java.lang.CharSequence)value$; break;
    case 7: session_screen_resolution = (java.lang.CharSequence)value$; break;
    case 8: session_language = (java.lang.CharSequence)value$; break;
    case 9: session_country = (java.lang.CharSequence)value$; break;
    case 10: session_city = (java.lang.CharSequence)value$; break;
    case 11: session_ip_address = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'user_id' field.
   * @return The value of the 'user_id' field.
   */
  public java.lang.CharSequence getUserId() {
    return user_id;
  }


  /**
   * Sets the value of the 'user_id' field.
   * @param value the value to set.
   */
  public void setUserId(java.lang.CharSequence value) {
    this.user_id = value;
  }

  /**
   * Gets the value of the 'session_login_status' field.
   * @return The value of the 'session_login_status' field.
   */
  public java.lang.CharSequence getSessionLoginStatus() {
    return session_login_status;
  }


  /**
   * Sets the value of the 'session_login_status' field.
   * @param value the value to set.
   */
  public void setSessionLoginStatus(java.lang.CharSequence value) {
    this.session_login_status = value;
  }

  /**
   * Gets the value of the 'session_login_time' field.
   * @return The value of the 'session_login_time' field.
   */
  public java.lang.CharSequence getSessionLoginTime() {
    return session_login_time;
  }


  /**
   * Sets the value of the 'session_login_time' field.
   * @param value the value to set.
   */
  public void setSessionLoginTime(java.lang.CharSequence value) {
    this.session_login_time = value;
  }

  /**
   * Gets the value of the 'session_auth_type' field.
   * @return The value of the 'session_auth_type' field.
   */
  public java.lang.CharSequence getSessionAuthType() {
    return session_auth_type;
  }


  /**
   * Sets the value of the 'session_auth_type' field.
   * @param value the value to set.
   */
  public void setSessionAuthType(java.lang.CharSequence value) {
    this.session_auth_type = value;
  }

  /**
   * Gets the value of the 'session_device_id' field.
   * @return The value of the 'session_device_id' field.
   */
  public java.lang.CharSequence getSessionDeviceId() {
    return session_device_id;
  }


  /**
   * Sets the value of the 'session_device_id' field.
   * @param value the value to set.
   */
  public void setSessionDeviceId(java.lang.CharSequence value) {
    this.session_device_id = value;
  }

  /**
   * Gets the value of the 'session_operation_system' field.
   * @return The value of the 'session_operation_system' field.
   */
  public java.lang.CharSequence getSessionOperationSystem() {
    return session_operation_system;
  }


  /**
   * Sets the value of the 'session_operation_system' field.
   * @param value the value to set.
   */
  public void setSessionOperationSystem(java.lang.CharSequence value) {
    this.session_operation_system = value;
  }

  /**
   * Gets the value of the 'session_browser' field.
   * @return The value of the 'session_browser' field.
   */
  public java.lang.CharSequence getSessionBrowser() {
    return session_browser;
  }


  /**
   * Sets the value of the 'session_browser' field.
   * @param value the value to set.
   */
  public void setSessionBrowser(java.lang.CharSequence value) {
    this.session_browser = value;
  }

  /**
   * Gets the value of the 'session_screen_resolution' field.
   * @return The value of the 'session_screen_resolution' field.
   */
  public java.lang.CharSequence getSessionScreenResolution() {
    return session_screen_resolution;
  }


  /**
   * Sets the value of the 'session_screen_resolution' field.
   * @param value the value to set.
   */
  public void setSessionScreenResolution(java.lang.CharSequence value) {
    this.session_screen_resolution = value;
  }

  /**
   * Gets the value of the 'session_language' field.
   * @return The value of the 'session_language' field.
   */
  public java.lang.CharSequence getSessionLanguage() {
    return session_language;
  }


  /**
   * Sets the value of the 'session_language' field.
   * @param value the value to set.
   */
  public void setSessionLanguage(java.lang.CharSequence value) {
    this.session_language = value;
  }

  /**
   * Gets the value of the 'session_country' field.
   * @return The value of the 'session_country' field.
   */
  public java.lang.CharSequence getSessionCountry() {
    return session_country;
  }


  /**
   * Sets the value of the 'session_country' field.
   * @param value the value to set.
   */
  public void setSessionCountry(java.lang.CharSequence value) {
    this.session_country = value;
  }

  /**
   * Gets the value of the 'session_city' field.
   * @return The value of the 'session_city' field.
   */
  public java.lang.CharSequence getSessionCity() {
    return session_city;
  }


  /**
   * Sets the value of the 'session_city' field.
   * @param value the value to set.
   */
  public void setSessionCity(java.lang.CharSequence value) {
    this.session_city = value;
  }

  /**
   * Gets the value of the 'session_ip_address' field.
   * @return The value of the 'session_ip_address' field.
   */
  public java.lang.CharSequence getSessionIpAddress() {
    return session_ip_address;
  }


  /**
   * Sets the value of the 'session_ip_address' field.
   * @param value the value to set.
   */
  public void setSessionIpAddress(java.lang.CharSequence value) {
    this.session_ip_address = value;
  }

  /**
   * Creates a new LoginEvent RecordBuilder.
   * @return A new LoginEvent RecordBuilder
   */
  public static com.welab.LoginEvent.Builder newBuilder() {
    return new com.welab.LoginEvent.Builder();
  }

  /**
   * Creates a new LoginEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new LoginEvent RecordBuilder
   */
  public static com.welab.LoginEvent.Builder newBuilder(com.welab.LoginEvent.Builder other) {
    if (other == null) {
      return new com.welab.LoginEvent.Builder();
    } else {
      return new com.welab.LoginEvent.Builder(other);
    }
  }

  /**
   * Creates a new LoginEvent RecordBuilder by copying an existing LoginEvent instance.
   * @param other The existing instance to copy.
   * @return A new LoginEvent RecordBuilder
   */
  public static com.welab.LoginEvent.Builder newBuilder(com.welab.LoginEvent other) {
    if (other == null) {
      return new com.welab.LoginEvent.Builder();
    } else {
      return new com.welab.LoginEvent.Builder(other);
    }
  }

  /**
   * RecordBuilder for LoginEvent instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<LoginEvent>
    implements org.apache.avro.data.RecordBuilder<LoginEvent> {

    private java.lang.CharSequence user_id;
    private java.lang.CharSequence session_login_status;
    private java.lang.CharSequence session_login_time;
    private java.lang.CharSequence session_auth_type;
    private java.lang.CharSequence session_device_id;
    private java.lang.CharSequence session_operation_system;
    private java.lang.CharSequence session_browser;
    private java.lang.CharSequence session_screen_resolution;
    private java.lang.CharSequence session_language;
    private java.lang.CharSequence session_country;
    private java.lang.CharSequence session_city;
    private java.lang.CharSequence session_ip_address;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.welab.LoginEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.user_id)) {
        this.user_id = data().deepCopy(fields()[0].schema(), other.user_id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.session_login_status)) {
        this.session_login_status = data().deepCopy(fields()[1].schema(), other.session_login_status);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.session_login_time)) {
        this.session_login_time = data().deepCopy(fields()[2].schema(), other.session_login_time);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.session_auth_type)) {
        this.session_auth_type = data().deepCopy(fields()[3].schema(), other.session_auth_type);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.session_device_id)) {
        this.session_device_id = data().deepCopy(fields()[4].schema(), other.session_device_id);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.session_operation_system)) {
        this.session_operation_system = data().deepCopy(fields()[5].schema(), other.session_operation_system);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.session_browser)) {
        this.session_browser = data().deepCopy(fields()[6].schema(), other.session_browser);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.session_screen_resolution)) {
        this.session_screen_resolution = data().deepCopy(fields()[7].schema(), other.session_screen_resolution);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.session_language)) {
        this.session_language = data().deepCopy(fields()[8].schema(), other.session_language);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.session_country)) {
        this.session_country = data().deepCopy(fields()[9].schema(), other.session_country);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.session_city)) {
        this.session_city = data().deepCopy(fields()[10].schema(), other.session_city);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.session_ip_address)) {
        this.session_ip_address = data().deepCopy(fields()[11].schema(), other.session_ip_address);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
    }

    /**
     * Creates a Builder by copying an existing LoginEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(com.welab.LoginEvent other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.user_id)) {
        this.user_id = data().deepCopy(fields()[0].schema(), other.user_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.session_login_status)) {
        this.session_login_status = data().deepCopy(fields()[1].schema(), other.session_login_status);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.session_login_time)) {
        this.session_login_time = data().deepCopy(fields()[2].schema(), other.session_login_time);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.session_auth_type)) {
        this.session_auth_type = data().deepCopy(fields()[3].schema(), other.session_auth_type);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.session_device_id)) {
        this.session_device_id = data().deepCopy(fields()[4].schema(), other.session_device_id);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.session_operation_system)) {
        this.session_operation_system = data().deepCopy(fields()[5].schema(), other.session_operation_system);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.session_browser)) {
        this.session_browser = data().deepCopy(fields()[6].schema(), other.session_browser);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.session_screen_resolution)) {
        this.session_screen_resolution = data().deepCopy(fields()[7].schema(), other.session_screen_resolution);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.session_language)) {
        this.session_language = data().deepCopy(fields()[8].schema(), other.session_language);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.session_country)) {
        this.session_country = data().deepCopy(fields()[9].schema(), other.session_country);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.session_city)) {
        this.session_city = data().deepCopy(fields()[10].schema(), other.session_city);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.session_ip_address)) {
        this.session_ip_address = data().deepCopy(fields()[11].schema(), other.session_ip_address);
        fieldSetFlags()[11] = true;
      }
    }

    /**
      * Gets the value of the 'user_id' field.
      * @return The value.
      */
    public java.lang.CharSequence getUserId() {
      return user_id;
    }


    /**
      * Sets the value of the 'user_id' field.
      * @param value The value of 'user_id'.
      * @return This builder.
      */
    public com.welab.LoginEvent.Builder setUserId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.user_id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'user_id' field has been set.
      * @return True if the 'user_id' field has been set, false otherwise.
      */
    public boolean hasUserId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'user_id' field.
      * @return This builder.
      */
    public com.welab.LoginEvent.Builder clearUserId() {
      user_id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'session_login_status' field.
      * @return The value.
      */
    public java.lang.CharSequence getSessionLoginStatus() {
      return session_login_status;
    }


    /**
      * Sets the value of the 'session_login_status' field.
      * @param value The value of 'session_login_status'.
      * @return This builder.
      */
    public com.welab.LoginEvent.Builder setSessionLoginStatus(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.session_login_status = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'session_login_status' field has been set.
      * @return True if the 'session_login_status' field has been set, false otherwise.
      */
    public boolean hasSessionLoginStatus() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'session_login_status' field.
      * @return This builder.
      */
    public com.welab.LoginEvent.Builder clearSessionLoginStatus() {
      session_login_status = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'session_login_time' field.
      * @return The value.
      */
    public java.lang.CharSequence getSessionLoginTime() {
      return session_login_time;
    }


    /**
      * Sets the value of the 'session_login_time' field.
      * @param value The value of 'session_login_time'.
      * @return This builder.
      */
    public com.welab.LoginEvent.Builder setSessionLoginTime(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.session_login_time = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'session_login_time' field has been set.
      * @return True if the 'session_login_time' field has been set, false otherwise.
      */
    public boolean hasSessionLoginTime() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'session_login_time' field.
      * @return This builder.
      */
    public com.welab.LoginEvent.Builder clearSessionLoginTime() {
      session_login_time = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'session_auth_type' field.
      * @return The value.
      */
    public java.lang.CharSequence getSessionAuthType() {
      return session_auth_type;
    }


    /**
      * Sets the value of the 'session_auth_type' field.
      * @param value The value of 'session_auth_type'.
      * @return This builder.
      */
    public com.welab.LoginEvent.Builder setSessionAuthType(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.session_auth_type = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'session_auth_type' field has been set.
      * @return True if the 'session_auth_type' field has been set, false otherwise.
      */
    public boolean hasSessionAuthType() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'session_auth_type' field.
      * @return This builder.
      */
    public com.welab.LoginEvent.Builder clearSessionAuthType() {
      session_auth_type = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'session_device_id' field.
      * @return The value.
      */
    public java.lang.CharSequence getSessionDeviceId() {
      return session_device_id;
    }


    /**
      * Sets the value of the 'session_device_id' field.
      * @param value The value of 'session_device_id'.
      * @return This builder.
      */
    public com.welab.LoginEvent.Builder setSessionDeviceId(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.session_device_id = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'session_device_id' field has been set.
      * @return True if the 'session_device_id' field has been set, false otherwise.
      */
    public boolean hasSessionDeviceId() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'session_device_id' field.
      * @return This builder.
      */
    public com.welab.LoginEvent.Builder clearSessionDeviceId() {
      session_device_id = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'session_operation_system' field.
      * @return The value.
      */
    public java.lang.CharSequence getSessionOperationSystem() {
      return session_operation_system;
    }


    /**
      * Sets the value of the 'session_operation_system' field.
      * @param value The value of 'session_operation_system'.
      * @return This builder.
      */
    public com.welab.LoginEvent.Builder setSessionOperationSystem(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.session_operation_system = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'session_operation_system' field has been set.
      * @return True if the 'session_operation_system' field has been set, false otherwise.
      */
    public boolean hasSessionOperationSystem() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'session_operation_system' field.
      * @return This builder.
      */
    public com.welab.LoginEvent.Builder clearSessionOperationSystem() {
      session_operation_system = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'session_browser' field.
      * @return The value.
      */
    public java.lang.CharSequence getSessionBrowser() {
      return session_browser;
    }


    /**
      * Sets the value of the 'session_browser' field.
      * @param value The value of 'session_browser'.
      * @return This builder.
      */
    public com.welab.LoginEvent.Builder setSessionBrowser(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.session_browser = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'session_browser' field has been set.
      * @return True if the 'session_browser' field has been set, false otherwise.
      */
    public boolean hasSessionBrowser() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'session_browser' field.
      * @return This builder.
      */
    public com.welab.LoginEvent.Builder clearSessionBrowser() {
      session_browser = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'session_screen_resolution' field.
      * @return The value.
      */
    public java.lang.CharSequence getSessionScreenResolution() {
      return session_screen_resolution;
    }


    /**
      * Sets the value of the 'session_screen_resolution' field.
      * @param value The value of 'session_screen_resolution'.
      * @return This builder.
      */
    public com.welab.LoginEvent.Builder setSessionScreenResolution(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.session_screen_resolution = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'session_screen_resolution' field has been set.
      * @return True if the 'session_screen_resolution' field has been set, false otherwise.
      */
    public boolean hasSessionScreenResolution() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'session_screen_resolution' field.
      * @return This builder.
      */
    public com.welab.LoginEvent.Builder clearSessionScreenResolution() {
      session_screen_resolution = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'session_language' field.
      * @return The value.
      */
    public java.lang.CharSequence getSessionLanguage() {
      return session_language;
    }


    /**
      * Sets the value of the 'session_language' field.
      * @param value The value of 'session_language'.
      * @return This builder.
      */
    public com.welab.LoginEvent.Builder setSessionLanguage(java.lang.CharSequence value) {
      validate(fields()[8], value);
      this.session_language = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'session_language' field has been set.
      * @return True if the 'session_language' field has been set, false otherwise.
      */
    public boolean hasSessionLanguage() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'session_language' field.
      * @return This builder.
      */
    public com.welab.LoginEvent.Builder clearSessionLanguage() {
      session_language = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'session_country' field.
      * @return The value.
      */
    public java.lang.CharSequence getSessionCountry() {
      return session_country;
    }


    /**
      * Sets the value of the 'session_country' field.
      * @param value The value of 'session_country'.
      * @return This builder.
      */
    public com.welab.LoginEvent.Builder setSessionCountry(java.lang.CharSequence value) {
      validate(fields()[9], value);
      this.session_country = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'session_country' field has been set.
      * @return True if the 'session_country' field has been set, false otherwise.
      */
    public boolean hasSessionCountry() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'session_country' field.
      * @return This builder.
      */
    public com.welab.LoginEvent.Builder clearSessionCountry() {
      session_country = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'session_city' field.
      * @return The value.
      */
    public java.lang.CharSequence getSessionCity() {
      return session_city;
    }


    /**
      * Sets the value of the 'session_city' field.
      * @param value The value of 'session_city'.
      * @return This builder.
      */
    public com.welab.LoginEvent.Builder setSessionCity(java.lang.CharSequence value) {
      validate(fields()[10], value);
      this.session_city = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'session_city' field has been set.
      * @return True if the 'session_city' field has been set, false otherwise.
      */
    public boolean hasSessionCity() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'session_city' field.
      * @return This builder.
      */
    public com.welab.LoginEvent.Builder clearSessionCity() {
      session_city = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'session_ip_address' field.
      * @return The value.
      */
    public java.lang.CharSequence getSessionIpAddress() {
      return session_ip_address;
    }


    /**
      * Sets the value of the 'session_ip_address' field.
      * @param value The value of 'session_ip_address'.
      * @return This builder.
      */
    public com.welab.LoginEvent.Builder setSessionIpAddress(java.lang.CharSequence value) {
      validate(fields()[11], value);
      this.session_ip_address = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'session_ip_address' field has been set.
      * @return True if the 'session_ip_address' field has been set, false otherwise.
      */
    public boolean hasSessionIpAddress() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'session_ip_address' field.
      * @return This builder.
      */
    public com.welab.LoginEvent.Builder clearSessionIpAddress() {
      session_ip_address = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public LoginEvent build() {
      try {
        LoginEvent record = new LoginEvent();
        record.user_id = fieldSetFlags()[0] ? this.user_id : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.session_login_status = fieldSetFlags()[1] ? this.session_login_status : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.session_login_time = fieldSetFlags()[2] ? this.session_login_time : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.session_auth_type = fieldSetFlags()[3] ? this.session_auth_type : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.session_device_id = fieldSetFlags()[4] ? this.session_device_id : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.session_operation_system = fieldSetFlags()[5] ? this.session_operation_system : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.session_browser = fieldSetFlags()[6] ? this.session_browser : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.session_screen_resolution = fieldSetFlags()[7] ? this.session_screen_resolution : (java.lang.CharSequence) defaultValue(fields()[7]);
        record.session_language = fieldSetFlags()[8] ? this.session_language : (java.lang.CharSequence) defaultValue(fields()[8]);
        record.session_country = fieldSetFlags()[9] ? this.session_country : (java.lang.CharSequence) defaultValue(fields()[9]);
        record.session_city = fieldSetFlags()[10] ? this.session_city : (java.lang.CharSequence) defaultValue(fields()[10]);
        record.session_ip_address = fieldSetFlags()[11] ? this.session_ip_address : (java.lang.CharSequence) defaultValue(fields()[11]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<LoginEvent>
    WRITER$ = (org.apache.avro.io.DatumWriter<LoginEvent>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<LoginEvent>
    READER$ = (org.apache.avro.io.DatumReader<LoginEvent>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.user_id);

    out.writeString(this.session_login_status);

    out.writeString(this.session_login_time);

    out.writeString(this.session_auth_type);

    out.writeString(this.session_device_id);

    out.writeString(this.session_operation_system);

    out.writeString(this.session_browser);

    out.writeString(this.session_screen_resolution);

    out.writeString(this.session_language);

    out.writeString(this.session_country);

    out.writeString(this.session_city);

    out.writeString(this.session_ip_address);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.user_id = in.readString(this.user_id instanceof Utf8 ? (Utf8)this.user_id : null);

      this.session_login_status = in.readString(this.session_login_status instanceof Utf8 ? (Utf8)this.session_login_status : null);

      this.session_login_time = in.readString(this.session_login_time instanceof Utf8 ? (Utf8)this.session_login_time : null);

      this.session_auth_type = in.readString(this.session_auth_type instanceof Utf8 ? (Utf8)this.session_auth_type : null);

      this.session_device_id = in.readString(this.session_device_id instanceof Utf8 ? (Utf8)this.session_device_id : null);

      this.session_operation_system = in.readString(this.session_operation_system instanceof Utf8 ? (Utf8)this.session_operation_system : null);

      this.session_browser = in.readString(this.session_browser instanceof Utf8 ? (Utf8)this.session_browser : null);

      this.session_screen_resolution = in.readString(this.session_screen_resolution instanceof Utf8 ? (Utf8)this.session_screen_resolution : null);

      this.session_language = in.readString(this.session_language instanceof Utf8 ? (Utf8)this.session_language : null);

      this.session_country = in.readString(this.session_country instanceof Utf8 ? (Utf8)this.session_country : null);

      this.session_city = in.readString(this.session_city instanceof Utf8 ? (Utf8)this.session_city : null);

      this.session_ip_address = in.readString(this.session_ip_address instanceof Utf8 ? (Utf8)this.session_ip_address : null);

    } else {
      for (int i = 0; i < 12; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.user_id = in.readString(this.user_id instanceof Utf8 ? (Utf8)this.user_id : null);
          break;

        case 1:
          this.session_login_status = in.readString(this.session_login_status instanceof Utf8 ? (Utf8)this.session_login_status : null);
          break;

        case 2:
          this.session_login_time = in.readString(this.session_login_time instanceof Utf8 ? (Utf8)this.session_login_time : null);
          break;

        case 3:
          this.session_auth_type = in.readString(this.session_auth_type instanceof Utf8 ? (Utf8)this.session_auth_type : null);
          break;

        case 4:
          this.session_device_id = in.readString(this.session_device_id instanceof Utf8 ? (Utf8)this.session_device_id : null);
          break;

        case 5:
          this.session_operation_system = in.readString(this.session_operation_system instanceof Utf8 ? (Utf8)this.session_operation_system : null);
          break;

        case 6:
          this.session_browser = in.readString(this.session_browser instanceof Utf8 ? (Utf8)this.session_browser : null);
          break;

        case 7:
          this.session_screen_resolution = in.readString(this.session_screen_resolution instanceof Utf8 ? (Utf8)this.session_screen_resolution : null);
          break;

        case 8:
          this.session_language = in.readString(this.session_language instanceof Utf8 ? (Utf8)this.session_language : null);
          break;

        case 9:
          this.session_country = in.readString(this.session_country instanceof Utf8 ? (Utf8)this.session_country : null);
          break;

        case 10:
          this.session_city = in.readString(this.session_city instanceof Utf8 ? (Utf8)this.session_city : null);
          break;

        case 11:
          this.session_ip_address = in.readString(this.session_ip_address instanceof Utf8 ? (Utf8)this.session_ip_address : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










